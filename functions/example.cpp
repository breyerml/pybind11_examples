#include <cassert>
#include <iostream>
#include <vector>

#include "pybind11/pybind11.h"

namespace py = pybind11;

double add(double x, double y) {
  return x + y;
}

void init_functions_simple(py::module_ &m) {
  m.def("add", &add);
  m.def("py_add", &add, "function two add two double values");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double mult(double x, double y) {
  std::cout << "double mult" << std::endl;
  return x * y;
}
int mult(int x, int y) {
  std::cout << "int mult" << std::endl;
  return x * y;
}

void init_functions_overloads(py::module_ &m) {
  m.def("mult", py::overload_cast<double, double>(&mult));
  m.def("mult", py::overload_cast<int, int>(&mult));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename T>
T div(T x, T y) {
  return x / y;
}

void init_functions_templates(py::module_ &m) {
  m.def("div", &div<double>);
  m.def("mult", &div<int>);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <pybind11/stl.h>

double dot(const std::vector<double> &x, const std::vector<double> &y) {
  assert(x.size() == y.size());

  double res{0.0};
  for (std::size_t i = 0; i < x.size(); ++i) {
    res += x[i] * y[i];
  }
  return res;
}

std::string concat(const std::string &x, const std::string &y) {
  return x + " " + y;
}

void println(const std::string_view str) {
  std::cout << str << std::endl;
}

void init_functions_stl(py::module_ &m) {
  m.def("dot", &dot);
  m.def("concat", &concat);
  m.def("print", &println);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector<double> saxpy(double a, const std::vector<double> &x, const std::vector<double> &y) {
  assert(x.size() == y.size());

  std::vector<double> res(x.size());
  for (std::size_t i = 0; i < x.size(); ++i) {
    res[i] = a * x[i] + y[i];
  }
  return res;
}

void init_functions_args(py::module_ &m) {
  m.def("saxpy", &saxpy);

  m.def(
      "saxpy", [](const std::vector<double> &x, const std::vector<double> &y, double a) {
        return saxpy(a, x, y);
      },
      py::arg("x"), py::arg("y"), py::pos_only(), py::arg("a") = 1.0);

  //  m.def("saxpy", [](const std::vector<double> &x, const std::vector<double> &y, py::kwargs args) {
  //    double a = 1.0;
  //    if (args.contains("a")) {
  //      a = args["a"].cast<double>();
  //    }
  //    return saxpy(a, x, y);
  //  });
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void init_functions(py::module_ &m) {
  init_functions_simple(m);
  init_functions_overloads(m);
  init_functions_templates(m);
  init_functions_stl(m);
  init_functions_args(m);
}